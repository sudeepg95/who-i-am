---
import { generateImage, generatePlaceholder } from "astro-eleventy-img";
const { title, image, url } = Astro.props;

const widths = [450, 800];
const sizes = "(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw";

const { webp, avif, png } = generateImage(image, {
  widths,
  formats: ["webp", "avif", "png"],
  outputDir: "public/assets/images/showcase",
  urlPath: "/assets/images/showcase",
});

const avifSrcset = avif.map(({ srcset }) => srcset).join(",");
const webpSrcset = webp.map(({ srcset }) => srcset).join(",");
const pngSrcset = png.map(({ srcset }) => srcset).join(",");

const placeholder = await generatePlaceholder(image, {
  outputDir: "src/assets/placeholders/showcase",
});
---

<a class="group aspect-video hover:!text-default" href={url} target="_blank">
  <figure class="relative w-full h-full overflow-hidden">
    <picture>
      <source type="image/avif" srcset={avifSrcset} {sizes} />
      <source type="image/webp" srcset={webpSrcset} {sizes} />
      <source type="image/png" srcset={pngSrcset} {sizes} />
      <img
        class="object-cover w-full h-full transition-all duration-300 bg-cover group-hover:scale-110 group-hover:opacity-20 group-focus:scale-110 group-focus:opacity-20"
        src={png[0].url}
        width={png[0].width}
        height={png[0].height}
        loading="lazy"
        decoding="async"
        onload="this.style.backgroundImage='none'"
        style={`background-image: url(${placeholder.dataURI});`}
        alt={`A screenshot of ${url}`}
      />
    </picture>
    <figcaption class="absolute inset-0">
      <div
        class="flex flex-col items-center justify-center h-full gap-2 transition-all duration-300 opacity-0 group-hover:opacity-100 group-focus:opacity-100"
      >
        <h3 class="text-xl font-extrabold text-center uppercase">
          {title}
        </h3>
        <p class="px-4 py-2 border border-current">{url}</p>
      </div>
    </figcaption>
  </figure>
</a>
